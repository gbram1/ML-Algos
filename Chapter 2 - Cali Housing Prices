	#California Housing Prices Regression

#script to get the data
import os
import tarfile
from six.moves import urllib
import numpy as np

DOWNLOAD_ROOT = "http://raw.githubusercontent.com/ageron/handson-ml/master/"
HOUSING_PATH = os.path.join("datasets", "housing")
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"

def fetch_housing_data(housing_url = HOUSING_URL, housing_path = HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path = housing_path)
    housing_tgz.close()

fetch_housing_data()
    
import pandas as pd
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

#check out the downloaded data
housing = load_housing_data()
housing.head()
housing.info()
housing["ocean_proximity"].value_counts() #ocean_proximity is the only non-integer type in the dataset
housing.describe()

#view information as a histrogram
import matplotlib.pyplot as plt
housing.hist(bins = 50, figsize = (20,15))
plt.show()

#create the test set manually instead of using train_test_split
'''
import numpy as np
def split_train_test(data, test_ratio):
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) * test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set = split_train_test(housing, 0.2)
print(len(train_set), "train +", len(test_set), "test")

#create immutable test set so that there is no change in next run using hash
import hashlib
def test_set_check(identifier, test_ratio, hash):
    return hash(np.int64(identifier)).digest()[-1] < 256*test_ratio

def split_train_test_by_id(data, test_ratio, id_column, hash = hashlib.md5):
    ids = data[id_column]
    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio, hash))
    return data.loc[~in_test_set], data.loc[in_test_set]

#use row ID as identifier
housing_with_id = housing.reset_index() #adds an 'index' column
train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, "index")

housing_with_id["id"] = housing["longitude"] *1000 + housing["latitude"]
train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, "id")
'''

#spitting test set and train set
from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size = 0.2, random_state = 0)

#categorizing income 
housing["income_cat"] = np.ceil(housing["median_income"] /1.5)
housing["income_cat"].where(housing["income_cat"] < 5, 5.0, inplace = True) #everything above a category 5 becomes a 5

#histogram of income categories
housing["income_cat"].hist(bins = 20, figsize = (3,3))

#Stratified sampling based on the income categories
from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits = 1, test_size = 0.2, random_state = 0)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]

strat_test_set["income_cat"].value_counts() / len(strat_test_set)

#remove the income_cat attribute so the data is back to its original state
for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis = 1, inplace = True)
    
#Disccover and Visuallize the Data
housing = strat_train_set.copy()
#creating a scatterplot of the data
housing.plot(kind = "scatter", x = "longitude", y = "latitude", alpha = 0.1)
housing.plot(kind = "scatter", x = "longitude", y="latitude", alpha = 0.4,
             s = housing["population"] /100, label = "population", figsize = (10,7),
             c = "median_house_value", cmap =plt.get_cmap("jet"), colorbar = True)  

corr_matrix = housing.corr() #finding correlations between attributes
corr_matrix["median_house_value"].sort_values(ascending = False) #corr compared to median_house_value

#checking correlation between specific attributes
from pandas.plotting import scatter_matrix
attributes = ["median_house_value", "median_income", "total_rooms", "housing_median_age"]
scatter_matrix(housing[attributes], figsize = (12,8)) 

#Zooming in on median_income to median_house_value scatterplot
housing.plot(kind = "scatter", x = "median_income", y = "median_house_value", alpha = 0.1)

#Combining attributes into new households
housing["rooms_per_household"] = housing["total_rooms"] / housing["households"]
housing["bedrooms_per_room"] = housing["total_bedrooms"]/housing["total_rooms"]
housing["population_per_household"] = housing["population"]/housing["households"]

#look at correlation matrix again
corr_matrix = housing.corr()
corr_matrix["median_house_value"].sort_values(ascending = False)

#Preparing the machine laerning algorithms
#start again with a new copy of strat_test_set and drop predictors . All previous attributes were lost
housing = strat_test_set.drop("median_house_value", axis = 1)
housing_labels = strat_test_set["median_house_value"].copy() #saving predictor value as housing_labels

#Data Cleaning - missing features
'''
3 different options to handle missing data (drop N/A, drop the attribute, or assign N/A to the mean values)
housing.dropna(subset = ["total_bedrooms"]) #Option 1
housing.drop("total_bedrooms", axis = 1) #Option 2
median = housing["total_bedrooms"].median() #Option 3
housing["total_bedrooms"].fillna(median, inplace = True)
Option 4 is to use Imputer, which we will use
'''
#Imputer to replace missing values
from sklearn.preprocessing import Imputer
imputer = Imputer(strategy = "median")
housing_num = housing.drop("ocean_proximity", axis = 1) #drop since this is a non-numerical value
imputer.fit(housing_num)
imputer.statistics_ #imputer stores the mean values in the attributes 'statistics_'
housing_num.median().values #check that they are the same values ase the imputer
X = imputer.transform(housing_num) #replacing missing values
#to put back into a Numpy array
housing_tr = pd.DataFrame(X, columns = housing_num.columns)

#Handling text and categorical attributes
housing_cat = housing["ocean_proximity"] #need to change this to numeric values since its currently words
housing_cat.head(10)
housing_cat_encoded, housing_categories = housing_cat.factorize() #turning the values into numerics
housing_cat_encoded[:10]
housing_categories #prints out a list of the categories

#utlitizing one-hot-encoder
from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder()
housing_cat_1hot = encoder.fit_transform(housing_cat_encoded.reshape(-1,1))
housing_cat_1hot.toarray()


cat_encoder = OneHotEncoder()
housing_cat_reshaped = housing_cat.values.reshape(-1,1)
housing_cat_1hot = cat_encoder.fit_transform(housing_cat_reshaped)
housing_cat_1hot

#Creating a custom transformer that combined attributes
from sklearn.base import BaseEstimator, TransformerMixin
rooms_ix, bedrooms_ix, population_ix, household_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room = True): # no *args or **kwargs
        self.add_bedrooms_per_room = add_bedrooms_per_room
    def fit(self, X, y = None):
        return self # nothing else to do
    def transform(self, X, y = None):
        rooms_per_household = X[:, rooms_ix] / X[:, household_ix]
        population_per_household = X[:, population_ix] / X[:, household_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]
        
attr_adder = CombinedAttributesAdder(add_bedrooms_per_room = False)
housing_extra_attribs = attr_adder.transform(housing.values)

#Transformation pipelines
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

num_pipeline = Pipeline([
        ('imputer', Imputer(strategy = "median")),
        ('attribs_adder', CombinedAttributesAdder()),
        ('std_scaler', StandardScaler()),           
        ])
housing_num_tr = num_pipeline.fit_transform(housing_num)

#Feeding pandas dataframe containing non-numerical columns directly into our pipeline
class DataFrameSelector(BaseEstimator, TransformerMixin):
    def __init__(self, attribute_names):
        self.attribute_names = attribute_names
    def fit(self, X, y = None):
        return self
    def transform(self, X):
        return X[self.attribute_names].values

num_attribs = list(housing_num)
cat_attribs = ["ocean_proximity"]

num_pipeline = Pipeline([
        ('selector', DataFrameSelector(num_attribs)),
        ('imputer', Imputer(strategy = "median")),
        ('attribs_adder', CombinedAttributesAdder()),
        ('std_scaler', StandardScaler()),        
        ])
#might not be correct since CategoricalEncoder is gone
cat_pipeline = Pipeline([
        ('selector', DataFrameSelector(cat_attribs)),
        ('cat_encoder', OneHotEncoder(sparse = False))
        ])

from sklearn.pipeline import FeatureUnion
full_pipeline = FeatureUnion(transformer_list = [
        ("num_pipeline", num_pipeline),
        ("cat_pipeline", cat_pipeline),
        ])

housing_prepared = full_pipeline.fit_transform(housing) 
housing_prepared

#Step 3: Training and Evaluation the Data

#Linear Regression model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels) 

some_data = housing.iloc[:5]
some_labels = housing_labels.iloc[:5]
some_data_prepared = full_pipeline.transform(some_data)
print("Predictions:", lin_reg.predict(some_data_prepared))
print("Labels:", list(some_labels))

#calculate the RMSE (Root mean squared error)
from sklearn.metrics import mean_squared_error
housing_predictions = lin_reg.predict(housing_prepared)
lin_mse = mean_squared_error(housing_labels, housing_predictions)
lin_rmse = np.sqrt(lin_mse)
lin_rmse #clearly this typical error of $68,000 is too large for our dataset

#Decision Tree model
from sklearn.tree import DecisionTreeRegressor
tree_reg = DecisionTreeRegressor()
tree_reg.fit(housing_prepared, housing_labels)

#evaluate it on the training set
housing_predictions = tree_reg.predict(housing_prepared)
tree_mse = mean_squared_error(housing_labels, housing_predictions)
tree_rmse = np.sqrt(tree_mse)
tree_rmse #result of zero indicates no error (must be an error somewhere)

#fix the decision tree overfitting by utilizing cross-validation
from sklearn.model_selection import cross_val_score
scores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring = "neg_mean_squared_error", cv =10)
tree_rmse_score = np.sqrt(-scores) #expects a utility function over a cost function

def display_scores(scores):
    print("Scores:", scores)
    print("Mean:", scores.mean())
    print("Standard Deviation:", scores.std())
display_scores(tree_rmse_score)
#linear regression scores
lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring = "neg_mean_squared_error", cv = 10)
lin_rmse_scores = np.sqrt(-lin_scores)
display_scores(lin_rmse_scores)

#Randpm Forest
from sklearn.ensemble import RandomForestRegressor
forest_reg = RandomForestRegressor()
forest_reg.fit(housing_prepared, housing_labels)
housing_predictions = forest_reg.predict(housing_prepared)
forest_mse = mean_squared_error(housing_labels, housing_predictions)
forest_rmse = np.sqrt(forest_mse)

forest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels, scoring = "neg_mean_squared_error", cv = 10)
forest_rmse_scores = np.sqrt(-forest_scores)
display_scores(forest_rmse_scores)

#Grid Search to find the best hyperparameters
from sklearn.model_selection import GridSearchCV
param_grid = [
        {'n_estimators': [3,10,30], 'max_features': [2,4,6,8]},
        {'bootstrap': [False], 'n_estimators': [3,10], 'max_features': [2,3,4]}
        ]
forest_reg = RandomForestRegressor()
grid_search = GridSearchCV(forest_reg, param_grid, cv =5, scoring = 'neg_mean_squared_error')
grid_search.fit(housing_prepared, housing_labels)

grid_search.best_params_ # max_features = 8 and n_estimators = 30
grid_search.best_estimator_

cvres = grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)

#analyze the best models and their errors
feature_importances = grid_search.best_estimator_.feature_importances_
feature_importances

extra_attribs = ["rooms_per_hhold", "pop_per_hhold", "bedrooms_per_room"]
cat_encoder = cat_pipeline.named_steps["cat_encoder"]
cat_one_hot_attribs = list(cat_encoder.categories_[0])
attributes = num_attribs + extra_attribs + cat_one_hot_attribs
sorted(zip(feature_importances, attributes), reverse = True)

#final model (after tweaking)
final_model = grid_search.best_estimator_

X_test = strat_test_set.drop("median_house_value", axis = 1)
y_test = strat_test_set["median_house_value"].copy()

X_test_prepared = full_pipeline.transform(X_test)
final_predictions = final_model.predict(X_test_prepared)

final_mse = mean_squared_error(y_test, final_predictions)
final_rmse = np.sqrt(final_mse) 
































